{"version":3,"sources":["State/actions.ts","Components/Counter/Counter.tsx","utils.ts","Components/Timer/Timer.tsx","Components/App/App.tsx","serviceWorker.js","constants.ts","State/reducer.ts","index.tsx"],"names":["incrementBreakLength","type","decrementBreakLength","incrementSessionLength","decrementSessionLength","setCurrentTime","value","setIsBreak","toggle","reset","connect","state","ownProps","id","breakLength","sessionLength","isRunning","dispatch","bindActionCreators","increment","decrement","props","react_default","a","createElement","className","concat","onClick","minutesToSeconds","minutes","Math","max","Timer","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInterval","audioRef","updateTimer","bind","assertThisInitialized","inherits","createClass","key","_this$props","currentTime","isBreak","newTime","play","clearInterval","setInterval","pause","_this2","_this$props2","timeLeft","seconds","mm","min","ss","round","trunc","toString","padStart","formatSeconds","playClass","ref","input","src","React","Component","App","Components_Counter_Counter","Components_Timer_Timer","href","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","newState","objectSpread","store","createStore","ReactDOM","render","es","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe1731d4.chunk.js","sourcesContent":["import { ActionCreator } from 'redux';\r\nimport {\r\n  IncrementBreakLengthAction,\r\n  DecrementBreakLengthAction,\r\n  IncrementSessionLengthAction,\r\n  DecrementSessionLengthAction,\r\n  ResetAction,\r\n  ToggleAction,\r\n  SetIsBreakAction,\r\n  SetCurrentTimeAction\r\n} from './types';\r\n\r\nexport const incrementBreakLength: ActionCreator<\r\n  IncrementBreakLengthAction\r\n> = () => ({\r\n  type: 'INCREMENT_BREAK_LENGTH'\r\n});\r\n\r\nexport const decrementBreakLength: ActionCreator<\r\n  DecrementBreakLengthAction\r\n> = () => ({\r\n  type: 'DECREMENT_BREAK_LENGTH'\r\n});\r\n\r\nexport const incrementSessionLength: ActionCreator<\r\n  IncrementSessionLengthAction\r\n> = () => ({\r\n  type: 'INCREMENT_SESSION_LENGTH'\r\n});\r\n\r\nexport const decrementSessionLength: ActionCreator<\r\n  DecrementSessionLengthAction\r\n> = () => ({\r\n  type: 'DECREMENT_SESSION_LENGTH'\r\n});\r\n\r\nexport const setCurrentTime: ActionCreator<SetCurrentTimeAction> = (\r\n  value: number\r\n) => ({\r\n  type: 'SET_CURRENT_TIME',\r\n  value\r\n});\r\n\r\nexport const setIsBreak: ActionCreator<SetIsBreakAction> = (\r\n  value: boolean\r\n) => ({\r\n  type: 'SET_IS_BREAK',\r\n  value\r\n});\r\n\r\nexport const toggle: ActionCreator<ToggleAction> = () => ({\r\n  type: 'TOGGLE'\r\n});\r\n\r\nexport const reset: ActionCreator<ResetAction> = () => ({\r\n  type: 'RESET'\r\n});\r\n","import React from 'react';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  incrementBreakLength,\r\n  decrementBreakLength,\r\n  incrementSessionLength,\r\n  decrementSessionLength\r\n} from '../../State/actions';\r\nimport { State } from '../../State/types';\r\nimport './Counter.scss';\r\n\r\ninterface OwnProps {\r\n  id: 'break' | 'session';\r\n}\r\n\r\ninterface StateToProps extends OwnProps {\r\n  isRunning: boolean;\r\n  value: number;\r\n}\r\n\r\ninterface DispatchToProps {\r\n  increment(): void;\r\n  decrement(): void;\r\n}\r\n\r\ntype Props = StateToProps & DispatchToProps;\r\n\r\nexport const Counter: React.FunctionComponent<Props> = props => (\r\n  <div className=\"Counter\">\r\n    <header id={`${props.id}-label`} className=\"Counter-header\">\r\n      <h2>{`${props.id} Length`}</h2>\r\n    </header>\r\n    <div className=\"Counter-content\">\r\n      <button\r\n        id={`${props.id}-increment`}\r\n        onClick={() => {\r\n          if (!props.isRunning) props.increment();\r\n        }}\r\n      >\r\n        <i className=\"fas fa-chevron-circle-up fa-3x\" />\r\n      </button>\r\n\r\n      <p id={`${props.id}-length`}>{props.value}</p>\r\n\r\n      <button\r\n        id={`${props.id}-decrement`}\r\n        onClick={() => {\r\n          if (!props.isRunning) props.decrement();\r\n        }}\r\n      >\r\n        <i className=\"fas fa-chevron-circle-down fa-3x\" />\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateToProps => {\r\n  return {\r\n    id: ownProps.id,\r\n    value: ownProps.id === 'break' ? state.breakLength : state.sessionLength,\r\n    isRunning: state.isRunning\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: Dispatch,\r\n  ownProps: OwnProps\r\n): DispatchToProps =>\r\n  bindActionCreators(\r\n    {\r\n      increment:\r\n        ownProps.id === 'break' ? incrementBreakLength : incrementSessionLength,\r\n      decrement:\r\n        ownProps.id === 'break' ? decrementBreakLength : decrementSessionLength\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Counter);\r\n","/**\r\n * Converts minutes into seconds.\r\n * @param minutes\r\n */\r\nexport const minutesToSeconds = (minutes: number) => Math.max(0, minutes * 60);\r\n\r\n/**\r\n * Returns the seconds as an \"MM:SS\" string.\r\n * @param seconds\r\n */\r\nexport const formatSeconds = (seconds: number) => {\r\n  let mm = Math.min(60, Math.max(0, seconds / 60));\r\n  let ss = Math.round((mm - Math.trunc(mm)) * 60);\r\n  mm = Math.trunc(mm);\r\n  return `${mm.toString().padStart(2, '0')}:${ss.toString().padStart(2, '0')}`;\r\n};\r\n","import React from 'react';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentTime, setIsBreak, toggle, reset } from '../../State/actions';\r\nimport { State } from '../../State/types';\r\nimport { formatSeconds, minutesToSeconds } from '../../utils';\r\nimport './Timer.scss';\r\n\r\ninterface StateToProps {\r\n  breakLength: number;\r\n  sessionLength: number;\r\n  currentTime: number;\r\n  isRunning: boolean;\r\n  isBreak: boolean;\r\n}\r\n\r\ninterface DispatchToProps {\r\n  setCurrentTime(value: number): void;\r\n  setIsBreak(value: boolean): void;\r\n  toggle(): void;\r\n  reset(): void;\r\n}\r\n\r\ntype Props = StateToProps & DispatchToProps;\r\n\r\nexport class Timer extends React.Component<Props> {\r\n  private updateInterval: NodeJS.Timeout | null = null;\r\n  private audioRef: HTMLAudioElement | null = null;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.updateTimer = this.updateTimer.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n\r\n  updateTimer() {\r\n    const {\r\n      breakLength,\r\n      sessionLength,\r\n      currentTime,\r\n      isBreak,\r\n      setCurrentTime,\r\n      setIsBreak\r\n    } = this.props;\r\n\r\n    let newTime = currentTime - 1;\r\n\r\n    if (newTime < 0) {\r\n      newTime = isBreak\r\n        ? minutesToSeconds(sessionLength)\r\n        : minutesToSeconds(breakLength);\r\n      setIsBreak(!isBreak);\r\n    }\r\n\r\n    if (newTime === 0 && this.audioRef) this.audioRef.play();\r\n\r\n    setCurrentTime(newTime);\r\n  }\r\n\r\n  toggle() {\r\n    if (this.updateInterval && this.props.isRunning) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    } else {\r\n      this.updateInterval = setInterval(this.updateTimer, 1000);\r\n    }\r\n\r\n    this.props.toggle();\r\n  }\r\n\r\n  reset() {\r\n    if (this.updateInterval && this.props.isRunning) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n\r\n    if (this.audioRef) {\r\n      this.audioRef.pause();\r\n      this.audioRef.currentTime = 0;\r\n    }\r\n\r\n    this.props.reset();\r\n  }\r\n\r\n  render() {\r\n    const { isBreak, currentTime, isRunning } = this.props;\r\n    const timeLeft = formatSeconds(currentTime);\r\n    const playClass = isRunning\r\n      ? 'fas fa-pause-circle fa-3x'\r\n      : 'fas fa-play-circle fa-3x';\r\n\r\n    return (\r\n      <div className=\"Timer\">\r\n        <header className=\"Timer-header\">\r\n          <h2 id=\"timer-label\">{isBreak ? 'Break' : 'Session'}</h2>\r\n        </header>\r\n\r\n        <div className=\"Timer-content\">\r\n          <p id=\"time-left\">{timeLeft}</p>\r\n\r\n          <audio\r\n            id=\"beep\"\r\n            ref={input => (this.audioRef = input)}\r\n            src={'https://goo.gl/65cBl1'}\r\n          />\r\n\r\n          <div className=\"Timer-controls\">\r\n            <button id=\"start_stop\" onClick={this.toggle}>\r\n              <i className={playClass} />\r\n            </button>\r\n            <button id=\"reset\" onClick={this.reset}>\r\n              <i className=\"fas fa-stop-circle fa-3x\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: State): StateToProps => ({\r\n  breakLength: state.breakLength,\r\n  sessionLength: state.sessionLength,\r\n  currentTime: state.currentTime,\r\n  isRunning: state.isRunning,\r\n  isBreak: state.isBreak\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToProps =>\r\n  bindActionCreators({ setCurrentTime, setIsBreak, toggle, reset }, dispatch);\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Timer);\r\n","import React from 'react';\r\nimport Counter from '../Counter/Counter';\r\nimport Timer from '../Timer/Timer';\r\nimport './App.scss';\r\n\r\nconst App: React.FunctionComponent = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <h1>Pomodoro Clock</h1>\r\n    </header>\r\n\r\n    <div className=\"App-content\">\r\n      <div className=\"App-counters\">\r\n        <Counter id=\"break\" />\r\n        <Counter id=\"session\" />\r\n      </div>\r\n\r\n      <div className=\"App-timer\">\r\n        <Timer />\r\n      </div>\r\n    </div>\r\n\r\n    <footer className=\"App-footer\">\r\n      <p>\r\n        Coded by <a href=\"https://github.com/moody\">Justin Moody</a>\r\n      </p>\r\n    </footer>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const BREAK_LENGTH_DEFAULT = 5;\r\nexport const BREAK_LENGTH_MIN = 1;\r\nexport const BREAK_LENGTH_MAX = 60;\r\n\r\nexport const SESSION_LENGTH_DEFAULT = 25;\r\nexport const SESSION_LENGTH_MIN = 1;\r\nexport const SESSION_LENGTH_MAX = 60;\r\n","import { State, Actions } from './types';\r\nimport { Reducer } from 'redux';\r\nimport * as Consts from '../constants';\r\nimport { minutesToSeconds } from '../utils';\r\n\r\nexport const initialState: State = {\r\n  breakLength: Consts.BREAK_LENGTH_DEFAULT,\r\n  sessionLength: Consts.SESSION_LENGTH_DEFAULT,\r\n  currentTime: minutesToSeconds(Consts.SESSION_LENGTH_DEFAULT),\r\n  isBreak: false,\r\n  isRunning: false\r\n};\r\n\r\nconst reducer: Reducer<State, Actions> = (\r\n  state: State = initialState,\r\n  action\r\n) => {\r\n  const newState = { ...state };\r\n\r\n  if (action.type === 'INCREMENT_BREAK_LENGTH') {\r\n    newState.breakLength = Math.min(\r\n      Consts.BREAK_LENGTH_MAX,\r\n      state.breakLength + 1\r\n    );\r\n    newState.currentTime = state.isBreak\r\n      ? minutesToSeconds(newState.breakLength)\r\n      : state.currentTime;\r\n  } else if (action.type === 'DECREMENT_BREAK_LENGTH') {\r\n    newState.breakLength = Math.max(\r\n      Consts.BREAK_LENGTH_MIN,\r\n      state.breakLength - 1\r\n    );\r\n    newState.currentTime = state.isBreak\r\n      ? minutesToSeconds(newState.breakLength)\r\n      : state.currentTime;\r\n  } else if (action.type === 'INCREMENT_SESSION_LENGTH') {\r\n    newState.sessionLength = Math.min(\r\n      Consts.SESSION_LENGTH_MAX,\r\n      state.sessionLength + 1\r\n    );\r\n    newState.currentTime = state.isBreak\r\n      ? state.currentTime\r\n      : minutesToSeconds(newState.sessionLength);\r\n  } else if (action.type === 'DECREMENT_SESSION_LENGTH') {\r\n    newState.sessionLength = Math.max(\r\n      Consts.SESSION_LENGTH_MIN,\r\n      state.sessionLength - 1\r\n    );\r\n    newState.currentTime = state.isBreak\r\n      ? state.currentTime\r\n      : minutesToSeconds(newState.sessionLength);\r\n  } else if (action.type === 'SET_CURRENT_TIME') {\r\n    newState.currentTime = Math.max(0, action.value);\r\n  } else if (action.type === 'SET_IS_BREAK') {\r\n    newState.isBreak = action.value;\r\n  } else if (action.type === 'TOGGLE') {\r\n    newState.isRunning = !state.isRunning;\r\n  } else if (action.type === 'RESET') {\r\n    return { ...initialState };\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport './index.scss';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer, { initialState } from './State/reducer';\r\n\r\nconst store = createStore(reducer, { ...initialState });\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}